@function property-number-slug($value, $unit) {
  // Converts value into shorthand slug.

  // e.g. Margin / u-m
  // pixels   --> margin: 10px     = u-m10     --> 10
  // negative --> margin: -24px    = u-mn24    --> n24
  // decimal  --> margin: 2.5px    = u-m2_5    --> 2_5
  // percent  --> margin: 100%     = u-m100p   --> 100p
  // em       --> margin: 1em      = u-m1em    --> 1em
  // rem      --> margin: 2rem     = u-m2rem   --> 2rem
  // vw       --> margin: 2vw     = u-m2vw    --> 2vw

  @if (type-of($value) != "number") {
    @error($value + " is not a number.")
  }

  $slug: "";
  @if ($value < 0) {
    // Append "n" if negative number.
    $slug: "#{$slug}n";
  }

  // Append absolute value.
  $slug: "#{$slug}#{abs($value)}";

  // If decimal, replace with "_"
  @if($value % 1 != 0){
    $slug: str_replace($slug,".","_");
  }

  @if ($unit == "px" or $unit == "") {
    @return $slug;
  } @else if ($unit == "%") {
    @return "#{$slug}p";
  } @else if ($unit == "col") {
    @return "#{$slug}c";
  } @else {
    @return "#{$slug}#{$unit}";
  }
}

@function property-number-transform($value, $unit) {
  // Resolve custom units.
  @if ($unit == "col" ){
    // Return percentage of grid.
    @return percentage(strip-unit($value)/$grid-columns);
  } @else if ($value == 0) {
    // Return 0 without unit.
    @return 0;
  } @else {
    // Combine value and unit.
    @return #{$value}#{$unit};
  }
}

@function property-breakpoint-variation($breakpoint) {
  $unitless: strip-unit($breakpoint);
  @if ($unitless == 0) {
    @return "";
  }

  @return "--#{property-number-slug($unitless, unit($breakpoint))}";
}
